import numpy as np
from scipy.integrate import odeint

#Metode Euler
def f(x, y):
    return -5 * y

def y_Euler(x0, y0, b, h):
    n = int((b - x0) / h)
    y = y0
    x = x0
    for r in range(1, n + 1):
        y = y + h * f(x, y)
        x = x + h
    return y

hasil = y_Euler(0, 5000, 0.1, 0.1)
y0 = 5000
h = 0.1
z = odeint(f, y0, [0, 0.1])

e = abs(z[-1] - hasil)
print(z[-1])
print("Selisih:", e)

#Metode Runge-Kutta 4
def f(x, y):
    return -5 * y

def y_RK4(x0, y0, b, h):
    n = int((b - x0) / h) 
    y = y0  
    x = x0
    for r in range(1, n + 1):
        k1 = h * f(x, y)
        k2 = h * f(x + h/2, y + k1/2)
        k3 = h * f(x + h/2, y + k2/2)
        k4 = h * f(x + h, y + k3)
        y = y + (k1 + 2*k2 + 2*k3 + k4) / 6 
        x = x + h  
    return y

hasil = y_RK4(0, 5000, 0.1, 0.1)
print(hasil)
